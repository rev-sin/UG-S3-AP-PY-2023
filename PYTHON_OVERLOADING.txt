METHOD OVERLOADING
CASE 1:
def product(a, b): 
    p = a * b 
    print(p) 
def product(a, b, c): 
    p = a * b*c 
    print(p) 
product(4, 5) 
product(4, 5, 5)

OUTPUT:
TypeError: product() missing 1 required positional argument: 'c'
........................................................................................................................

CASE 2:

def product(a, b): 
    p = a * b 
    print(p) 
def product(a, b, c): 
    p = a * b*c 
    print(p) 
#product(4, 5) 
product(4, 5, 5)

OUTPUT: 
100
.................................................................................................................................

CASE 3:
class Compute:
 def area(self, x = None, y = None):
    if x != None and y != None:
        return x * y
    elif x != None:
        return x * x
    else:
        return 0
obj = Compute()
print("Area Value:", obj.area())
print("Area Value:", obj.area(4))
print("Area Value:", obj.area(3, 5))

OUTPUT:
Area Value: 0
Area Value: 16
Area Value: 15

..........................................................................................................................
CASE 4:

class Compute:
 def sum(self, x = None, y = None,z=None):
    if x != None and y != None and z!=None:
        return x + y
    elif x == None and y!=None and z!=None:
        return z + y
    
obj = Compute()
print("sum Value:", obj.sum(2,5,1))
print("sum Value:", obj.sum(3,10))

OUTPUT:

sum Value: 7
sum Value: None

............................................................................................................................
OPERATOR OVERLOADING:

CASE 1:

class Point:
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y
p1 = Point(1, 2)
p2 = Point(2, 3)
print(p1+p2)

.......................................................

CASE 2:

class Point:
    def __init__(self,a ,b):
        self.a = a
        self.b = b
    def __str__(self):
        return self.a , self.b 
    def __add__(self, other):
        temp=Point(0,0)
        temp.a=self.a + other.a
        temp.b=self.b + other.b
        return temp
    def displaypoint(self):
        print(self.a , self.b)
Ob1 = Point(1, 2) 
Ob2 = Point(2, 3) 
Ob3 = Ob1 + Ob2 
Ob3.displaypoint()


.....................................................

CASE3:

class Point:
    def __init__(self,a ,b):
        self.a = a
        self.b = b
    def __str__(self):
        return(self.a , self.b) 
    def __add__(self, other):
        return self.a + other.a, self.b + other.b
Ob1 = Point(1, 2) 
Ob2 = Point(2, 3) 
Ob3 = Ob1 + Ob2 
print(Ob3)

..................................................................................

CASE4:

class A: 
    def __init__(self, a): 
        self.a = a 
        
    def __gt__(self, other): 
        if(self.a>other.a): 
            return True
        else: 
          return False
ob1 = A(2) 
ob2 = A(3) 
if(ob1>ob2): 
    print("ob1 is greater than ob2") 
else: 
    print("ob2 is greater than ob1")

......................................................................................................
CASE 5:
class A: 
    def __init__(self, a): 
        self.a = a 
    def __lt__(self, other): 
        if(self.a<other.a): 
            return "ob1 is lessthan ob2"
        else: 
            return "ob2 is less than ob1"
    def __eq__(self, other): 
        if(self.a == other.a): 
            return "Both are equal"
        else: 
            return "Not equal"            
ob1 = A(2) 
ob2 = A(3) 
print(ob1 < ob2) 
ob3 = A(4) 
ob4 = A(4) 
print(ob1 == ob2)

..........................................................................................